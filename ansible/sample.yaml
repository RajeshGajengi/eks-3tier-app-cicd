---
- name: Install Java and Jenkins using shell script
  hosts: localhost
  become: true

  tasks:
    - name: Ensure Java install script is executable
      file:
        path: /root/ansible/installation_scripts/java_script.sh
        mode: '0755'
        state: file

    - name: Execute Java install script
      script: /root/ansible/installation_scripts/java_script.sh

    - name: Ensure Jenkins install script is executable
      file:
        path: /root/ansible/installation_scripts/jenkins_script.sh
        mode: '0755'
        state: file

    - name: Execute Jenkins install script
      script: /root/ansible/installation_scripts/jenkins_script.sh


- name: Install Terraform using shell script
  hosts: agent
  become: true

  tasks:
    - name: Ensure Terraform install script is executable
      file:
        path: /root/ansible/installation_scripts/terraform_script.sh
        mode: '0755'
        state: file

    - name: Execute Terraform install script
      script: /root/ansible/installation_scripts/terraform_script.sh  # use script if file is in localhost or use shell if file is on remote host












---
- name: Install Java and Jenkins on localhost (master)
  hosts: localhost
  become: true

  tasks:
    - name: Execute Java install script
      script: ./scripts/java_script.sh

    - name: Execute Jenkins install script
      script: ./scripts/jenkins_script.sh



- name: Install java, AWS CLI, Docker, kubectl, Helm on agent server
  hosts: agent
  become: true

  tasks:
    - name: Create directory to store scripts on remote server
      file:
        path: /home/ubuntu/scripts
        state: directory
        mode: '0755'

    - name: Copy AWS CLI script to agent server
      copy:
        src: ./scripts/awscli_script.sh
        dest: /home/ubuntu/scripts/awscli_script.sh
        mode: '0755'

    - name: Execute the AWS CLI script
      shell: /home/ubuntu/scripts/awscli_script.sh


    - name: Copy Docker script to agent server
      copy:
        src: ./scripts/docker_script.sh
        dest: /home/ubuntu/scripts/docker_script.sh
        mode: '0755'

    - name: Execute the docker script
      shell: /home/ubuntu/scripts/docker_script.sh


    - name: Copy kubectl script to agent server
      copy:
        src: ./scripts/kubectl_script.sh
        dest: /home/ubuntu/scripts/kubectl_script.sh
        mode: '0755'

    - name: Execute the kubectl script
      shell: /home/ubuntu/scripts/kubectl_script.sh


    - name: Copy helm script to agent server
      copy:
        src: ./scripts/helm_script.sh
        dest: /home/ubuntu/scripts/helm_script.sh
        mode: '0755'

    - name: Execute the kubectl script
      shell: /home/ubuntu/scripts/helm_script.sh


- name: Create a database on AWS RDS
  hosts: localhost
  gather_facts: false
  vars:
    db_host: "mydb.cujwsmiewj2i.us-east-1.rds.amazonaws.com"
    db_user: "admin"
    db_password: "Rajesh1234"
    db_name: "student_db"

  tasks:
    - name: Create database on RDS
      community.mysql.mysql_db:
        name: "{{ db_name }}"
        state: present
        login_host: "{{ db_host }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        login_port: 3306




- name: Install java,docker agent server
  hosts: sonarqube
  become: true

  tasks:
    - name: Create directory to store scripts on remote server
      file:
        path: /home/ubuntu/scripts
        state: directory
        mode: '0755'

    - name: Copy Docker script to agent server
      copy:
        src: ./scripts/docker_script.sh
        dest: /home/ubuntu/scripts/docker_script.sh
        mode: '0755'

    - name: Execute the docker script
      shell: /home/ubuntu/scripts/docker_script.sh

    - name: run sonarqube container
      shell: docker run --name sonarqube-custom -p 9000:9000 sonarqube:10.6-communit



##################################################
- name: Install prometheus and grafana
  hosts: monitor
  become: true

  tasks:
  - name: Download prometheus 
    get_url: 
      url: https://github.com/prometheus/prometheus/releases/download/v3.7.2/prometheus-3.7.2.linux-amd64.tar.gz
      dest: /tmp
      mode: '0644'

  - name: Extract the tar.gz file
    unarchive:
      src: "/tmp/prometheus-3.7.2.linux-amd64.tar.gz"
      dest: "/opt"
      remote_src: yes   # indicates file already on remote host

  - name: Run Prometheus in the background
    shell: "nohup ./prometheus > prometheus.log 2>&1 &"
    args:
      chdir: "/opt/prometheus-3.7.2.linux-amd64" # change directory before executing


  - name: Verify Prometheus is running
    shell: "pgrep -a prometheus"
    register: prometheus_status

  - debug:
      var: prometheus_status.stdout



- name: Install Grafana Enterprise manually
  hosts: monitor
  become: yes
  tasks:

  - name: Install dependencies
    apt:
      name:
        - adduser
        - libfontconfig1
        - musl
      state: present
      update_cache: yes

  - name: Download Grafana Enterprise .deb package
    get_url:
        url: "https://dl.grafana.com/grafana-enterprise/release/12.2.1/grafana-enterprise_12.2.1_18655849634_linux_amd64.deb"
        dest: "/tmp/grafana-enterprise_12.2.1_amd64.deb"
        mode: '0644'

  - name: Install Grafana Enterprise package
    apt:
      deb: "/tmp/grafana-enterprise_12.2.1_amd64.deb"
      state: present

  - name: Enable and start Grafana service
    systemd:
      name: grafana-server
      enabled: yes
      state: started



# üß† Explanation

# nohup: keeps the process alive even after SSH/Ansible disconnects.

# > prometheus.log 2>&1: redirects both stdout and stderr to a log file.

# &: runs the process in the background.

# shell: ensures the line is executed through a real shell (/bin/sh -c).

# | Stream   | Name                | File Descriptor | Purpose                                                |
# | -------- | ------------------- | --------------- | ------------------------------------------------------ |
# | `stdout` | **Standard Output** | `1`             | Normal output ‚Äî the ‚Äúexpected‚Äù results of the command. |
# | `stderr` | **Standard Error**  | `2`             | Error messages, warnings, or diagnostics.              |
